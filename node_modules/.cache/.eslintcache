[{"E:\\items\\cardgame\\src\\index.js":"1","E:\\items\\cardgame\\src\\App.js":"2","E:\\items\\cardgame\\src\\component\\card.jsx":"3"},{"size":205,"mtime":1672299419342,"results":"4","hashOfConfig":"5"},{"size":2834,"mtime":1673152714776,"results":"6","hashOfConfig":"5"},{"size":573,"mtime":1673152309391,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"coa1as",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\items\\cardgame\\src\\index.js",[],[],"E:\\items\\cardgame\\src\\App.js",["18","19"],[],"import { useState } from \"react\";\nimport { Card } from \"./component/card\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  const item = [\n    { emoji: \"1\", id: \"1\", matchFound: false, selected: false },\n    { emoji: \"2\", id: \"2\", matchFound: false, selected: false },\n    { emoji: \"3\", id: \"3\", matchFound: false, selected: false },\n    { emoji: \"4\", id: \"4\", matchFound: false, selected: false },\n    { emoji: \"5\", id: \"5\", matchFound: false, selected: false },\n    { emoji: \"6\", id: \"6\", matchFound: false, selected: false },\n    { emoji: \"7\", id: \"7\", matchFound: false, selected: false },\n    { emoji: \"8\", id: \"8\", matchFound: false, selected: false },\n  ];\n  const [cards, setCards] = useState(item);\n  const [firstC, setFirstC] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [secondC, setSecondC] = useState(null);\n  const [count, setCount] = useState(0);\n  const [moves, setMoves] = useState(0);\n  const [selected, setSelected] = useState(null)\n  function resetCards() {\n    let shuffled = [...item, ...item].sort(() => Math.random() - 0.5);\n    setCards(shuffled);\n  }\n  function resetChoices() {\n    setFirstC(null);\n    setSecondC(null);\n    setMoves((pre) => pre + 1);\n    selected.classList.remove('selected')\n    setTimeout(() => {\n      setDisabled(false);\n    }, 1000);\n  }\n  function handleSelection(e) {\n    if (firstC) {\n      setSecondC(e.target.dataset.id);\n    } else {\n      setFirstC(e.target.dataset.id);\n      e.target.classList.add('selected')\n      setSelected(e.target)\n    }\n  }\n  function resetGame() {\n    setCount(0);\n    setMoves(0);\n    resetCards();\n  }\n  useEffect(() => {\n    resetCards();\n  }, []);\n  useEffect(() => {\n    if (!secondC) {\n      return;\n    }\n    if (firstC === secondC) {\n      setCount((pre) => {\n        if (pre + 1 === 8) {\n          setTimeout(() => {\n            alert(`you win! totally took ${moves + 1} steps`);\n            return resetGame();\n          }, 100);\n        }\n        return pre + 1;\n      });\n      setCards((pre) => {\n        return pre.map((c) => {\n          if (c.id === firstC) {\n            return { ...c, matchFound: true };\n          } else {\n            return c;\n          }\n        });\n      });\n    }\n    setDisabled(true);\n    resetChoices();\n  }, [firstC, secondC]);\n  return (\n    <div className=\"App\">\n      <h2>Card Game</h2>\n      <button onClick={resetGame}>New Game</button>\n      <p>Your Score:{count}</p>\n      <div className=\"wrapper\">\n        {Array.from(cards).map((card, idx) => {\n          return (\n            <Card\n              key={idx}\n              card={card}\n              disabled={disabled}\n              handleSelection={handleSelection}\n            />\n          );\n        })}\n      </div>\n      <p>Total Moves:{moves}</p>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\items\\cardgame\\src\\component\\card.jsx",[],[],{"ruleId":"20","severity":1,"message":"21","line":53,"column":6,"nodeType":"22","endLine":53,"endColumn":8,"suggestions":"23"},{"ruleId":"20","severity":1,"message":"24","line":80,"column":6,"nodeType":"22","endLine":80,"endColumn":23,"suggestions":"25"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetCards'. Either include it or remove the dependency array.","ArrayExpression",["26"],"React Hook useEffect has missing dependencies: 'moves', 'resetChoices', and 'resetGame'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCount' needs the current value of 'moves'.",["27"],{"desc":"28","fix":"29"},{"desc":"30","fix":"31"},"Update the dependencies array to be: [resetCards]",{"range":"32","text":"33"},"Update the dependencies array to be: [firstC, moves, resetChoices, resetGame, secondC]",{"range":"34","text":"35"},[1690,1692],"[resetCards]",[2294,2311],"[firstC, moves, resetChoices, resetGame, secondC]"]